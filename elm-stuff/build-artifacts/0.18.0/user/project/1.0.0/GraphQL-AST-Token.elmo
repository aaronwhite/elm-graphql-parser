var _user$project$GraphQL_AST_Token$kindToString = function (tokenKind) {
	var _p0 = tokenKind;
	switch (_p0.ctor) {
		case 'StartOfFile':
			return '<SOF>';
		case 'EndOfFile':
			return '<EOF>';
		case 'ExclamationPoint':
			return '!';
		case 'DollarSign':
			return '$';
		case 'LeftParens':
			return '(';
		case 'RightParens':
			return ')';
		case 'Spread':
			return '...';
		case 'Colon':
			return ':';
		case 'Equals':
			return '=';
		case 'At':
			return '@';
		case 'LeftSquareBrace':
			return '[';
		case 'RightSquareBrace':
			return ']';
		case 'LeftCurlyBrace':
			return '{';
		case 'Pipe':
			return '|';
		case 'RightCurlyBrace':
			return '}';
		case 'NameLiteral':
			return 'Name';
		case 'IntLiteral':
			return 'Int';
		case 'FloatLiteral':
			return 'Float';
		case 'StringLiteral':
			return 'String';
		default:
			return 'Comment';
	}
};
var _user$project$GraphQL_AST_Token$untoken = function (_p1) {
	var _p2 = _p1;
	return _p2._0;
};
var _user$project$GraphQL_AST_Token$TokenRec = F7(
	function (a, b, c, d, e, f, g) {
		return {kind: a, start: b, end: c, line: d, column: e, previous: f, next: g};
	});
var _user$project$GraphQL_AST_Token$Comment = function (a) {
	return {ctor: 'Comment', _0: a};
};
var _user$project$GraphQL_AST_Token$StringLiteral = function (a) {
	return {ctor: 'StringLiteral', _0: a};
};
var _user$project$GraphQL_AST_Token$FloatLiteral = function (a) {
	return {ctor: 'FloatLiteral', _0: a};
};
var _user$project$GraphQL_AST_Token$IntLiteral = function (a) {
	return {ctor: 'IntLiteral', _0: a};
};
var _user$project$GraphQL_AST_Token$NameLiteral = function (a) {
	return {ctor: 'NameLiteral', _0: a};
};
var _user$project$GraphQL_AST_Token$RightCurlyBrace = {ctor: 'RightCurlyBrace'};
var _user$project$GraphQL_AST_Token$Pipe = {ctor: 'Pipe'};
var _user$project$GraphQL_AST_Token$LeftCurlyBrace = {ctor: 'LeftCurlyBrace'};
var _user$project$GraphQL_AST_Token$RightSquareBrace = {ctor: 'RightSquareBrace'};
var _user$project$GraphQL_AST_Token$LeftSquareBrace = {ctor: 'LeftSquareBrace'};
var _user$project$GraphQL_AST_Token$At = {ctor: 'At'};
var _user$project$GraphQL_AST_Token$Equals = {ctor: 'Equals'};
var _user$project$GraphQL_AST_Token$Colon = {ctor: 'Colon'};
var _user$project$GraphQL_AST_Token$Spread = {ctor: 'Spread'};
var _user$project$GraphQL_AST_Token$RightParens = {ctor: 'RightParens'};
var _user$project$GraphQL_AST_Token$LeftParens = {ctor: 'LeftParens'};
var _user$project$GraphQL_AST_Token$DollarSign = {ctor: 'DollarSign'};
var _user$project$GraphQL_AST_Token$ExclamationPoint = {ctor: 'ExclamationPoint'};
var _user$project$GraphQL_AST_Token$EndOfFile = {ctor: 'EndOfFile'};
var _user$project$GraphQL_AST_Token$StartOfFile = {ctor: 'StartOfFile'};
var _user$project$GraphQL_AST_Token$Token = function (a) {
	return {ctor: 'Token', _0: a};
};
var _user$project$GraphQL_AST_Token$token = F7(
	function (kind, start, end, line, column, previous, next) {
		return _user$project$GraphQL_AST_Token$Token(
			A7(_user$project$GraphQL_AST_Token$TokenRec, kind, start, end, line, column, previous, next));
	});
