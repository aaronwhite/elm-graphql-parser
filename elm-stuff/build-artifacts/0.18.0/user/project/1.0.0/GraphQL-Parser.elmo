var _user$project$GraphQL_Parser$operationType = _elm_tools$parser$Parser$oneOf(
	{
		ctor: '::',
		_0: A2(
			_elm_tools$parser$Parser$map,
			function (_p0) {
				return _user$project$GraphQL_AST$Query;
			},
			_elm_tools$parser$Parser$keyword('query')),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_tools$parser$Parser$map,
				function (_p1) {
					return _user$project$GraphQL_AST$Mutation;
				},
				_elm_tools$parser$Parser$keyword('mutation')),
			_1: {ctor: '[]'}
		}
	});
var _user$project$GraphQL_Parser$selectionSetOpt_ = function (selectionSetParser) {
	return _elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: _elm_tools$parser$Parser$lazy(selectionSetParser),
			_1: {
				ctor: '::',
				_0: _elm_tools$parser$Parser$succeed(
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$GraphQL_Parser$nullValue = A2(
	_elm_tools$parser$Parser$map,
	function (_p2) {
		return _user$project$GraphQL_AST$NullValue;
	},
	_elm_tools$parser$Parser$keyword('null'));
var _user$project$GraphQL_Parser$stringValue = A2(
	_elm_tools$parser$Parser_ops['|.'],
	A2(
		_elm_tools$parser$Parser_ops['|='],
		A2(
			_elm_tools$parser$Parser_ops['|.'],
			_elm_tools$parser$Parser$succeed(_user$project$GraphQL_AST$StringValue),
			_elm_tools$parser$Parser$symbol('\"')),
		A2(
			_elm_tools$parser$Parser$keep,
			_elm_tools$parser$Parser$zeroOrMore,
			function (c) {
				return (!_elm_lang$core$Native_Utils.eq(
					c,
					_elm_lang$core$Native_Utils.chr('\r'))) && ((!_elm_lang$core$Native_Utils.eq(
					c,
					_elm_lang$core$Native_Utils.chr('\n'))) && (!_elm_lang$core$Native_Utils.eq(
					c,
					_elm_lang$core$Native_Utils.chr('\"'))));
			})),
	_elm_tools$parser$Parser$symbol('\"'));
var _user$project$GraphQL_Parser$intValue = A2(_elm_tools$parser$Parser$map, _user$project$GraphQL_AST$IntValue, _elm_tools$parser$Parser$int);
var _user$project$GraphQL_Parser$floatValue = A2(_elm_tools$parser$Parser$map, _user$project$GraphQL_AST$FloatValue, _elm_tools$parser$Parser$float);
var _user$project$GraphQL_Parser$boolValue = _elm_tools$parser$Parser$oneOf(
	{
		ctor: '::',
		_0: A2(
			_elm_tools$parser$Parser$map,
			function (_p3) {
				return _user$project$GraphQL_AST$BoolValue(true);
			},
			_elm_tools$parser$Parser$keyword('true')),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_tools$parser$Parser$map,
				function (_p4) {
					return _user$project$GraphQL_AST$BoolValue(false);
				},
				_elm_tools$parser$Parser$keyword('false')),
			_1: {ctor: '[]'}
		}
	});
var _user$project$GraphQL_Parser$ignoreChars = _elm_lang$core$Set$fromList(
	{
		ctor: '::',
		_0: _elm_lang$core$Native_Utils.chr('\t'),
		_1: {
			ctor: '::',
			_0: _elm_lang$core$Native_Utils.chr('\n'),
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Native_Utils.chr('\r'),
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Native_Utils.chr('ï»¿'),
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.chr(' '),
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.chr(','),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _user$project$GraphQL_Parser$ws = A2(
	_elm_tools$parser$Parser$ignore,
	_elm_tools$parser$Parser$zeroOrMore,
	A2(_elm_lang$core$Basics$flip, _elm_lang$core$Set$member, _user$project$GraphQL_Parser$ignoreChars));
var _user$project$GraphQL_Parser$listValue = function (valueParser) {
	return A2(
		_elm_tools$parser$Parser$map,
		_user$project$GraphQL_AST$ListValue,
		_elm_tools$parser$Parser_LanguageKit$sequence(
			{
				start: '[',
				separator: '',
				end: ']',
				spaces: _user$project$GraphQL_Parser$ws,
				item: _elm_tools$parser$Parser$lazy(valueParser),
				trailing: _elm_tools$parser$Parser_LanguageKit$Optional
			}));
};
var _user$project$GraphQL_Parser$nextItem = function (item) {
	return A2(
		_elm_tools$parser$Parser$delayedCommit,
		_user$project$GraphQL_Parser$ws,
		A2(
			_elm_tools$parser$Parser_ops['|='],
			A2(
				_elm_tools$parser$Parser_ops['|.'],
				_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
				_user$project$GraphQL_Parser$ws),
			item));
};
var _user$project$GraphQL_Parser$curlySeqHelp = F2(
	function (itemParser, revItems) {
		return _elm_tools$parser$Parser$oneOf(
			{
				ctor: '::',
				_0: A2(
					_elm_tools$parser$Parser$andThen,
					function (n) {
						return A2(
							_user$project$GraphQL_Parser$curlySeqHelp,
							itemParser,
							{ctor: '::', _0: n, _1: revItems});
					},
					_user$project$GraphQL_Parser$nextItem(itemParser)),
				_1: {
					ctor: '::',
					_0: _elm_tools$parser$Parser$succeed(
						_elm_lang$core$List$reverse(revItems)),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$GraphQL_Parser$curlySeq = function (itemParser) {
	return A2(
		_elm_tools$parser$Parser_ops['|.'],
		A2(
			_elm_tools$parser$Parser_ops['|.'],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|.'],
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
						_elm_tools$parser$Parser$symbol('{')),
					_user$project$GraphQL_Parser$ws),
				A2(
					_elm_tools$parser$Parser$andThen,
					function (n) {
						return A2(
							_user$project$GraphQL_Parser$curlySeqHelp,
							itemParser,
							{
								ctor: '::',
								_0: n,
								_1: {ctor: '[]'}
							});
					},
					itemParser)),
			_user$project$GraphQL_Parser$ws),
		_elm_tools$parser$Parser$symbol('}'));
};
var _user$project$GraphQL_Parser$listType = function (typeParser) {
	return A2(
		_elm_tools$parser$Parser_ops['|.'],
		A2(
			_elm_tools$parser$Parser_ops['|.'],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|.'],
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						_elm_tools$parser$Parser$succeed(_user$project$GraphQL_AST$ListType),
						_elm_tools$parser$Parser$symbol('[')),
					_user$project$GraphQL_Parser$ws),
				_elm_tools$parser$Parser$lazy(typeParser)),
			_user$project$GraphQL_Parser$ws),
		_elm_tools$parser$Parser$symbol(']'));
};
var _user$project$GraphQL_Parser$keywords = _elm_lang$core$Set$fromList(
	{
		ctor: '::',
		_0: 'query',
		_1: {
			ctor: '::',
			_0: 'subscription',
			_1: {
				ctor: '::',
				_0: 'mutation',
				_1: {
					ctor: '::',
					_0: 'on',
					_1: {
						ctor: '::',
						_0: 'fragment',
						_1: {
							ctor: '::',
							_0: 'type',
							_1: {
								ctor: '::',
								_0: 'true',
								_1: {
									ctor: '::',
									_0: 'false',
									_1: {
										ctor: '::',
										_0: 'null',
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$GraphQL_Parser$escapables = _elm_lang$core$Set$fromList(
	{
		ctor: '::',
		_0: _elm_lang$core$Native_Utils.chr('\\'),
		_1: {
			ctor: '::',
			_0: _elm_lang$core$Native_Utils.chr('/'),
			_1: {
				ctor: '::',
				_0: _elm_lang$core$Native_Utils.chr('b'),
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Native_Utils.chr('f'),
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Native_Utils.chr('n'),
						_1: {
							ctor: '::',
							_0: _elm_lang$core$Native_Utils.chr('r'),
							_1: {
								ctor: '::',
								_0: _elm_lang$core$Native_Utils.chr('t'),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		}
	});
var _user$project$GraphQL_Parser$multiOr = F2(
	function (conds, val) {
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (next, memo) {
					return memo ? memo : next(val);
				}),
			false,
			conds);
	});
var _user$project$GraphQL_Parser$name = A2(
	_elm_tools$parser$Parser$map,
	_user$project$GraphQL_AST$Name,
	A3(
		_elm_tools$parser$Parser_LanguageKit$variable,
		_user$project$GraphQL_Parser$multiOr(
			{
				ctor: '::',
				_0: _elm_lang$core$Char$isLower,
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Char$isUpper,
					_1: {
						ctor: '::',
						_0: F2(
							function (x, y) {
								return _elm_lang$core$Native_Utils.eq(x, y);
							})(
							_elm_lang$core$Native_Utils.chr('_')),
						_1: {ctor: '[]'}
					}
				}
			}),
		_user$project$GraphQL_Parser$multiOr(
			{
				ctor: '::',
				_0: _elm_lang$core$Char$isLower,
				_1: {
					ctor: '::',
					_0: _elm_lang$core$Char$isUpper,
					_1: {
						ctor: '::',
						_0: _elm_lang$core$Char$isDigit,
						_1: {
							ctor: '::',
							_0: F2(
								function (x, y) {
									return _elm_lang$core$Native_Utils.eq(x, y);
								})(
								_elm_lang$core$Native_Utils.chr('_')),
							_1: {ctor: '[]'}
						}
					}
				}
			}),
		_user$project$GraphQL_Parser$keywords));
var _user$project$GraphQL_Parser$variable = A2(
	_elm_tools$parser$Parser_ops['|='],
	A2(
		_elm_tools$parser$Parser_ops['|.'],
		_elm_tools$parser$Parser$succeed(_user$project$GraphQL_AST$Variable),
		_elm_tools$parser$Parser$symbol('$')),
	_user$project$GraphQL_Parser$name);
var _user$project$GraphQL_Parser$enumValue = A2(_elm_tools$parser$Parser$map, _user$project$GraphQL_AST$EnumValue, _user$project$GraphQL_Parser$name);
var _user$project$GraphQL_Parser$kvp_ = function (valueParser) {
	return A2(
		_elm_tools$parser$Parser_ops['|='],
		A2(
			_elm_tools$parser$Parser_ops['|.'],
			A2(
				_elm_tools$parser$Parser_ops['|.'],
				A2(
					_elm_tools$parser$Parser_ops['|.'],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						_elm_tools$parser$Parser$succeed(
							F2(
								function (v0, v1) {
									return {ctor: '_Tuple2', _0: v0, _1: v1};
								})),
						_user$project$GraphQL_Parser$name),
					_user$project$GraphQL_Parser$ws),
				_elm_tools$parser$Parser$symbol(':')),
			_user$project$GraphQL_Parser$ws),
		_elm_tools$parser$Parser$lazy(valueParser));
};
var _user$project$GraphQL_Parser$objectValue = function (valueParser) {
	return A2(
		_elm_tools$parser$Parser$map,
		_user$project$GraphQL_AST$ObjectValue,
		_elm_tools$parser$Parser_LanguageKit$sequence(
			{
				start: '{',
				separator: '',
				end: '}',
				spaces: _user$project$GraphQL_Parser$ws,
				item: _user$project$GraphQL_Parser$kvp_(valueParser),
				trailing: _elm_tools$parser$Parser_LanguageKit$Optional
			}));
};
var _user$project$GraphQL_Parser$value = _elm_tools$parser$Parser$oneOf(
	{
		ctor: '::',
		_0: _user$project$GraphQL_Parser$boolValue,
		_1: {
			ctor: '::',
			_0: _user$project$GraphQL_Parser$intValue,
			_1: {
				ctor: '::',
				_0: _user$project$GraphQL_Parser$floatValue,
				_1: {
					ctor: '::',
					_0: _user$project$GraphQL_Parser$stringValue,
					_1: {
						ctor: '::',
						_0: _user$project$GraphQL_Parser$enumValue,
						_1: {
							ctor: '::',
							_0: A2(_elm_tools$parser$Parser$map, _user$project$GraphQL_AST$VariableValue, _user$project$GraphQL_Parser$variable),
							_1: {
								ctor: '::',
								_0: _user$project$GraphQL_Parser$listValue(
									function (_p5) {
										var _p6 = _p5;
										return _user$project$GraphQL_Parser$value;
									}),
								_1: {
									ctor: '::',
									_0: _user$project$GraphQL_Parser$objectValue(
										function (_p7) {
											var _p8 = _p7;
											return _user$project$GraphQL_Parser$value;
										}),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$GraphQL_Parser$defaultValue = _elm_tools$parser$Parser$oneOf(
	{
		ctor: '::',
		_0: A2(
			_elm_tools$parser$Parser$map,
			_elm_lang$core$Maybe$Just,
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|.'],
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
						_elm_tools$parser$Parser$symbol('=')),
					_user$project$GraphQL_Parser$ws),
				_user$project$GraphQL_Parser$value)),
		_1: {
			ctor: '::',
			_0: _elm_tools$parser$Parser$succeed(_elm_lang$core$Maybe$Nothing),
			_1: {ctor: '[]'}
		}
	});
var _user$project$GraphQL_Parser$kvp = _user$project$GraphQL_Parser$kvp_(
	function (_p9) {
		var _p10 = _p9;
		return _user$project$GraphQL_Parser$value;
	});
var _user$project$GraphQL_Parser$argument = A2(
	_elm_tools$parser$Parser$map,
	_elm_lang$core$Basics$uncurry(_user$project$GraphQL_AST$Argument),
	_user$project$GraphQL_Parser$kvp);
var _user$project$GraphQL_Parser$arguments = _elm_tools$parser$Parser_LanguageKit$sequence(
	{
		start: '(',
		separator: '',
		end: ')',
		spaces: _user$project$GraphQL_Parser$ws,
		item: A2(
			_elm_tools$parser$Parser$map,
			_elm_lang$core$Basics$uncurry(_user$project$GraphQL_AST$Argument),
			_user$project$GraphQL_Parser$kvp),
		trailing: _elm_tools$parser$Parser_LanguageKit$Optional
	});
var _user$project$GraphQL_Parser$argumentsOpt = _elm_tools$parser$Parser$oneOf(
	{
		ctor: '::',
		_0: _user$project$GraphQL_Parser$arguments,
		_1: {
			ctor: '::',
			_0: _elm_tools$parser$Parser$succeed(
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _user$project$GraphQL_Parser$aliasedName = _elm_tools$parser$Parser$oneOf(
	{
		ctor: '::',
		_0: A3(
			_elm_tools$parser$Parser$delayedCommitMap,
			F2(
				function (a, b) {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Maybe$Just(a),
						_1: b
					};
				}),
			_user$project$GraphQL_Parser$name,
			A2(
				_elm_tools$parser$Parser$delayedCommit,
				A2(
					_elm_tools$parser$Parser_ops['|.'],
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						_user$project$GraphQL_Parser$ws,
						_elm_tools$parser$Parser$symbol(':')),
					_user$project$GraphQL_Parser$ws),
				_user$project$GraphQL_Parser$name)),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_tools$parser$Parser_ops['|='],
				_elm_tools$parser$Parser$succeed(
					function (a) {
						return {ctor: '_Tuple2', _0: _elm_lang$core$Maybe$Nothing, _1: a};
					}),
				_user$project$GraphQL_Parser$name),
			_1: {ctor: '[]'}
		}
	});
var _user$project$GraphQL_Parser$directive = A2(
	_elm_tools$parser$Parser_ops['|='],
	A2(
		_elm_tools$parser$Parser_ops['|.'],
		A2(
			_elm_tools$parser$Parser_ops['|='],
			A2(
				_elm_tools$parser$Parser_ops['|.'],
				A2(
					_elm_tools$parser$Parser_ops['|.'],
					_elm_tools$parser$Parser$succeed(_user$project$GraphQL_AST$Directive),
					_elm_tools$parser$Parser$symbol('@')),
				_user$project$GraphQL_Parser$ws),
			_user$project$GraphQL_Parser$name),
		_user$project$GraphQL_Parser$ws),
	_user$project$GraphQL_Parser$argumentsOpt);
var _user$project$GraphQL_Parser$directives = A2(
	_elm_tools$parser$Parser$repeat,
	_elm_tools$parser$Parser$zeroOrMore,
	A2(_elm_tools$parser$Parser_ops['|.'], _user$project$GraphQL_Parser$directive, _user$project$GraphQL_Parser$ws));
var _user$project$GraphQL_Parser$field_ = function (selectionSetParser) {
	return A2(
		_elm_tools$parser$Parser_ops['|='],
		A2(
			_elm_tools$parser$Parser_ops['|.'],
			A2(
				_elm_tools$parser$Parser_ops['|='],
				A2(
					_elm_tools$parser$Parser_ops['|.'],
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|.'],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								_elm_tools$parser$Parser$succeed(
									_elm_lang$core$Basics$uncurry(_user$project$GraphQL_AST$Field)),
								_user$project$GraphQL_Parser$aliasedName),
							_user$project$GraphQL_Parser$ws),
						_user$project$GraphQL_Parser$argumentsOpt),
					_user$project$GraphQL_Parser$ws),
				_user$project$GraphQL_Parser$directives),
			_user$project$GraphQL_Parser$ws),
		_user$project$GraphQL_Parser$selectionSetOpt_(selectionSetParser));
};
var _user$project$GraphQL_Parser$inlineOrSpread_ = function (selectionSetParser) {
	return A2(
		_elm_tools$parser$Parser$delayedCommit,
		A2(
			_elm_tools$parser$Parser_ops['|.'],
			_elm_tools$parser$Parser$symbol('...'),
			_user$project$GraphQL_Parser$ws),
		_elm_tools$parser$Parser$oneOf(
			{
				ctor: '::',
				_0: A2(
					_elm_tools$parser$Parser$map,
					_user$project$GraphQL_AST$InlineFragmentSelection,
					A2(
						_elm_tools$parser$Parser_ops['|='],
						A2(
							_elm_tools$parser$Parser_ops['|.'],
							A2(
								_elm_tools$parser$Parser_ops['|='],
								A2(
									_elm_tools$parser$Parser_ops['|.'],
									A2(
										_elm_tools$parser$Parser_ops['|='],
										A2(
											_elm_tools$parser$Parser_ops['|.'],
											A2(
												_elm_tools$parser$Parser_ops['|.'],
												_elm_tools$parser$Parser$succeed(_user$project$GraphQL_AST$InlineFragment),
												_elm_tools$parser$Parser$keyword('on')),
											_user$project$GraphQL_Parser$ws),
										A2(_elm_tools$parser$Parser$map, _user$project$GraphQL_AST$NamedType, _user$project$GraphQL_Parser$name)),
									_user$project$GraphQL_Parser$ws),
								_user$project$GraphQL_Parser$directives),
							_user$project$GraphQL_Parser$ws),
						_elm_tools$parser$Parser$lazy(selectionSetParser))),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_tools$parser$Parser$map,
						_user$project$GraphQL_AST$FragmentSpreadSelection,
						A2(
							_elm_tools$parser$Parser_ops['|='],
							A2(
								_elm_tools$parser$Parser_ops['|.'],
								A2(
									_elm_tools$parser$Parser_ops['|='],
									_elm_tools$parser$Parser$succeed(_user$project$GraphQL_AST$FragmentSpread),
									_user$project$GraphQL_Parser$name),
								_user$project$GraphQL_Parser$ws),
							_user$project$GraphQL_Parser$directives)),
					_1: {ctor: '[]'}
				}
			}));
};
var _user$project$GraphQL_Parser$selection_ = function (selectionSetParser) {
	return _elm_tools$parser$Parser$oneOf(
		{
			ctor: '::',
			_0: A2(
				_elm_tools$parser$Parser$map,
				_user$project$GraphQL_AST$FieldSelection,
				_user$project$GraphQL_Parser$field_(selectionSetParser)),
			_1: {
				ctor: '::',
				_0: _user$project$GraphQL_Parser$inlineOrSpread_(selectionSetParser),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$GraphQL_Parser$selectionSet = _user$project$GraphQL_Parser$curlySeq(
	_elm_tools$parser$Parser$lazy(
		function (_p11) {
			var _p12 = _p11;
			return _user$project$GraphQL_Parser$selection_(
				function (_p13) {
					var _p14 = _p13;
					return _user$project$GraphQL_Parser$selectionSet;
				});
		}));
var _user$project$GraphQL_Parser$fragment = A2(
	_elm_tools$parser$Parser_ops['|='],
	A2(
		_elm_tools$parser$Parser_ops['|.'],
		A2(
			_elm_tools$parser$Parser_ops['|='],
			A2(
				_elm_tools$parser$Parser_ops['|.'],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						A2(
							_elm_tools$parser$Parser_ops['|.'],
							A2(
								_elm_tools$parser$Parser_ops['|.'],
								A2(
									_elm_tools$parser$Parser_ops['|='],
									A2(
										_elm_tools$parser$Parser_ops['|.'],
										A2(
											_elm_tools$parser$Parser_ops['|.'],
											_elm_tools$parser$Parser$succeed(_user$project$GraphQL_AST$Fragment),
											_elm_tools$parser$Parser$keyword('fragment')),
										_user$project$GraphQL_Parser$ws),
									_user$project$GraphQL_Parser$name),
								_user$project$GraphQL_Parser$ws),
							_elm_tools$parser$Parser$keyword('on')),
						_user$project$GraphQL_Parser$ws),
					A2(_elm_tools$parser$Parser$map, _user$project$GraphQL_AST$NamedType, _user$project$GraphQL_Parser$name)),
				_user$project$GraphQL_Parser$ws),
			_user$project$GraphQL_Parser$directives),
		_user$project$GraphQL_Parser$ws),
	_user$project$GraphQL_Parser$selectionSet);
var _user$project$GraphQL_Parser$nameOpt = _elm_tools$parser$Parser$oneOf(
	{
		ctor: '::',
		_0: A2(_elm_tools$parser$Parser$map, _elm_lang$core$Maybe$Just, _user$project$GraphQL_Parser$name),
		_1: {
			ctor: '::',
			_0: _elm_tools$parser$Parser$succeed(_elm_lang$core$Maybe$Nothing),
			_1: {ctor: '[]'}
		}
	});
var _user$project$GraphQL_Parser$namedType = A2(_elm_tools$parser$Parser$map, _user$project$GraphQL_AST$NamedType, _user$project$GraphQL_Parser$name);
var _user$project$GraphQL_Parser$nonNullType = function (typeParser) {
	return A2(
		_elm_tools$parser$Parser_ops['|.'],
		A2(
			_elm_tools$parser$Parser_ops['|='],
			_elm_tools$parser$Parser$succeed(_elm_lang$core$Basics$identity),
			_elm_tools$parser$Parser$oneOf(
				{
					ctor: '::',
					_0: A2(_elm_tools$parser$Parser$map, _user$project$GraphQL_AST$NamedNonNull, _user$project$GraphQL_Parser$namedType),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_tools$parser$Parser$map,
							_user$project$GraphQL_AST$ListNonNull,
							_user$project$GraphQL_Parser$listType(typeParser)),
						_1: {ctor: '[]'}
					}
				})),
		_elm_tools$parser$Parser$symbol('!'));
};
var _user$project$GraphQL_Parser$type_ = _elm_tools$parser$Parser$oneOf(
	{
		ctor: '::',
		_0: A2(_elm_tools$parser$Parser$map, _user$project$GraphQL_AST$NamedTypeType, _user$project$GraphQL_Parser$namedType),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_tools$parser$Parser$map,
				_user$project$GraphQL_AST$ListTypeType,
				_user$project$GraphQL_Parser$listType(
					function (_p15) {
						return _user$project$GraphQL_Parser$type_;
					})),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_tools$parser$Parser$map,
					_user$project$GraphQL_AST$NonNullTypeType,
					_user$project$GraphQL_Parser$nonNullType(
						function (_p16) {
							return _user$project$GraphQL_Parser$type_;
						})),
				_1: {ctor: '[]'}
			}
		}
	});
var _user$project$GraphQL_Parser$variableDefinition = A2(
	_elm_tools$parser$Parser_ops['|='],
	A2(
		_elm_tools$parser$Parser_ops['|.'],
		A2(
			_elm_tools$parser$Parser_ops['|='],
			A2(
				_elm_tools$parser$Parser_ops['|.'],
				A2(
					_elm_tools$parser$Parser_ops['|.'],
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							_elm_tools$parser$Parser$succeed(_user$project$GraphQL_AST$VariableDefinition),
							_user$project$GraphQL_Parser$variable),
						_user$project$GraphQL_Parser$ws),
					_elm_tools$parser$Parser$symbol(':')),
				_user$project$GraphQL_Parser$ws),
			_user$project$GraphQL_Parser$type_),
		_user$project$GraphQL_Parser$ws),
	_user$project$GraphQL_Parser$defaultValue);
var _user$project$GraphQL_Parser$variableDefinitions = _elm_tools$parser$Parser$oneOf(
	{
		ctor: '::',
		_0: _elm_tools$parser$Parser_LanguageKit$sequence(
			{start: '(', separator: '', end: ')', spaces: _user$project$GraphQL_Parser$ws, item: _user$project$GraphQL_Parser$variableDefinition, trailing: _elm_tools$parser$Parser_LanguageKit$Optional}),
		_1: {
			ctor: '::',
			_0: _elm_tools$parser$Parser$succeed(
				{ctor: '[]'}),
			_1: {ctor: '[]'}
		}
	});
var _user$project$GraphQL_Parser$operation = A2(
	_elm_tools$parser$Parser_ops['|='],
	A2(
		_elm_tools$parser$Parser_ops['|.'],
		A2(
			_elm_tools$parser$Parser_ops['|='],
			A2(
				_elm_tools$parser$Parser_ops['|.'],
				A2(
					_elm_tools$parser$Parser_ops['|='],
					A2(
						_elm_tools$parser$Parser_ops['|.'],
						A2(
							_elm_tools$parser$Parser_ops['|='],
							A2(
								_elm_tools$parser$Parser_ops['|.'],
								A2(
									_elm_tools$parser$Parser_ops['|='],
									_elm_tools$parser$Parser$succeed(_user$project$GraphQL_AST$Operation),
									_user$project$GraphQL_Parser$operationType),
								_user$project$GraphQL_Parser$ws),
							_user$project$GraphQL_Parser$nameOpt),
						_user$project$GraphQL_Parser$ws),
					_user$project$GraphQL_Parser$variableDefinitions),
				_user$project$GraphQL_Parser$ws),
			_user$project$GraphQL_Parser$directives),
		_user$project$GraphQL_Parser$ws),
	_user$project$GraphQL_Parser$selectionSet);
var _user$project$GraphQL_Parser$definition = _elm_tools$parser$Parser$oneOf(
	{
		ctor: '::',
		_0: A2(_elm_tools$parser$Parser$map, _user$project$GraphQL_AST$FragmentDefinition, _user$project$GraphQL_Parser$fragment),
		_1: {
			ctor: '::',
			_0: A2(_elm_tools$parser$Parser$map, _user$project$GraphQL_AST$OperationDefinition, _user$project$GraphQL_Parser$operation),
			_1: {ctor: '[]'}
		}
	});
var _user$project$GraphQL_Parser$document = A2(
	_elm_tools$parser$Parser_ops['|.'],
	A2(
		_elm_tools$parser$Parser_ops['|='],
		A2(
			_elm_tools$parser$Parser_ops['|.'],
			_elm_tools$parser$Parser$succeed(_user$project$GraphQL_AST$Document),
			_user$project$GraphQL_Parser$ws),
		A2(
			_elm_tools$parser$Parser$repeat,
			_elm_tools$parser$Parser$oneOrMore,
			A2(_elm_tools$parser$Parser_ops['|.'], _user$project$GraphQL_Parser$definition, _user$project$GraphQL_Parser$ws))),
	_user$project$GraphQL_Parser$ws);
var _user$project$GraphQL_Parser$parse = function (doc) {
	return A2(_elm_tools$parser$Parser$run, _user$project$GraphQL_Parser$document, doc);
};
