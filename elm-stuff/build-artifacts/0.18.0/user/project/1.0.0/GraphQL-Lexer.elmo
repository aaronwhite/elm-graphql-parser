var _user$project$GraphQL_Lexer$readDigits = F3(
	function (codes, start, firstCode) {
		return _elm_lang$core$Native_Utils.crash(
			'GraphQL.Lexer',
			{
				start: {line: 84, column: 5},
				end: {line: 84, column: 16}
			})('Not Implemented');
	});
var _user$project$GraphQL_Lexer$readString = F5(
	function (source, start, line, col, prev) {
		return _elm_lang$core$Native_Utils.crash(
			'GraphQL.Lexer',
			{
				start: {line: 52, column: 5},
				end: {line: 52, column: 16}
			})('Not Implemented');
	});
var _user$project$GraphQL_Lexer$readComment = F5(
	function (source, start, line, col, prev) {
		return _elm_lang$core$Native_Utils.crash(
			'GraphQL.Lexer',
			{
				start: {line: 47, column: 5},
				end: {line: 47, column: 16}
			})('Not Implemented');
	});
var _user$project$GraphQL_Lexer$positionAfterWhitespace = F2(
	function (position, lexer) {
		positionAfterWhitespace:
		while (true) {
			var _p0 = A2(
				_Skinney$elm_array_exploration$Array_Hamt$get,
				position,
				_user$project$GraphQL_Source$characters(lexer.source));
			if (_p0.ctor === 'Just') {
				if (_p0._0 === 10) {
					var _v1 = position + 1,
						_v2 = _elm_lang$core$Native_Utils.update(
						lexer,
						{line: lexer.line + 1, lineStart: position + 1});
					position = _v1;
					lexer = _v2;
					continue positionAfterWhitespace;
				} else {
					var _p1 = _p0._0;
					if (_elm_lang$core$Native_Utils.eq(_p1, 9) || (_elm_lang$core$Native_Utils.eq(_p1, 13) || (_elm_lang$core$Native_Utils.eq(_p1, 32) || (_elm_lang$core$Native_Utils.eq(_p1, 44) || _elm_lang$core$Native_Utils.eq(_p1, 65279))))) {
						var _v3 = position + 1,
							_v4 = lexer;
						position = _v3;
						lexer = _v4;
						continue positionAfterWhitespace;
					} else {
						return {ctor: '_Tuple2', _0: position, _1: lexer};
					}
				}
			} else {
				return {ctor: '_Tuple2', _0: position, _1: lexer};
			}
		}
	});
var _user$project$GraphQL_Lexer$token = F6(
	function (kind, start, end, line, column, previous) {
		return A7(
			_user$project$GraphQL_AST_Token$token,
			kind,
			start,
			end,
			line,
			column,
			_elm_lang$core$Maybe$Just(previous),
			_elm_lang$core$Maybe$Nothing);
	});
var _user$project$GraphQL_Lexer$readName = F5(
	function (codes, position, line, col, prev) {
		var readNameHelp = function (end) {
			readNameHelp:
			while (true) {
				var _p2 = A2(_Skinney$elm_array_exploration$Array_Hamt$get, end, codes);
				if (_p2.ctor === 'Just') {
					var _p3 = _p2._0;
					if (_elm_lang$core$Native_Utils.eq(_p3, 95) || (((_elm_lang$core$Native_Utils.cmp(_p3, 48) > -1) && (_elm_lang$core$Native_Utils.cmp(_p3, 57) < 1)) || (((_elm_lang$core$Native_Utils.cmp(_p3, 65) > -1) && (_elm_lang$core$Native_Utils.cmp(_p3, 90) < 1)) || ((_elm_lang$core$Native_Utils.cmp(_p3, 97) > -1) && (_elm_lang$core$Native_Utils.cmp(_p3, 122) < 1))))) {
						var _v6 = end + 1;
						end = _v6;
						continue readNameHelp;
					} else {
						return end;
					}
				} else {
					return end;
				}
			}
		};
		var end = readNameHelp(position + 1);
		var value = _elm_lang$core$String$fromList(
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Char$fromCode,
				_Skinney$elm_array_exploration$Array_Hamt$toList(
					A3(_Skinney$elm_array_exploration$Array_Hamt$slice, position, end, codes))));
		return A6(
			_user$project$GraphQL_Lexer$token,
			_user$project$GraphQL_AST_Token$NameLiteral(value),
			position,
			end,
			line,
			col,
			prev);
	});
var _user$project$GraphQL_Lexer$readNumber = F6(
	function (codes, start, firstCode, line, col, prev) {
		var result = A2(
			_user$project$State$execState,
			{code: firstCode, position: start, isFloat: false},
			A2(
				_user$project$State$andThen,
				function (s) {
					return _elm_lang$core$Native_Utils.eq(s.code, 46) ? A2(
						_user$project$State$followedBy,
						_user$project$State$get,
						A3(
							_user$project$Result_Extra$fold,
							_user$project$State$fail,
							function (_p4) {
								var _p5 = _p4;
								return _user$project$State$put(
									_elm_lang$core$Native_Utils.update(
										s,
										{position: _p5._0, code: _p5._1, isFloat: true}));
							},
							A2(
								_elm_lang$core$Result$andThen,
								A2(_user$project$GraphQL_Lexer$readDigits, codes, s.position + 1),
								A2(
									_user$project$Maybe_Extra$toResult,
									'Out of range',
									A2(_Skinney$elm_array_exploration$Array_Hamt$get, s.position + 1, codes))))) : _user$project$State$get;
				},
				A2(
					_user$project$State$andThen,
					function (s) {
						if (_elm_lang$core$Native_Utils.eq(s.code, 48)) {
							var _p6 = A2(_Skinney$elm_array_exploration$Array_Hamt$get, s.position + 1, codes);
							if (_p6.ctor === 'Just') {
								var _p7 = _p6._0;
								return ((_elm_lang$core$Native_Utils.cmp(_p7, 48) > -1) && (_elm_lang$core$Native_Utils.cmp(_p7, 57) < 1)) ? _user$project$State$fail('Invalid number with leading 0') : A2(
									_user$project$State$followedBy,
									_user$project$State$get,
									_user$project$State$put(
										_elm_lang$core$Native_Utils.update(
											s,
											{position: s.position + 1, code: _p7})));
							} else {
								return _user$project$State$fail('Out of range');
							}
						} else {
							var _p8 = A3(_user$project$GraphQL_Lexer$readDigits, codes, s.position, s.code);
							if (_p8.ctor === 'Ok') {
								return A2(
									_user$project$State$followedBy,
									_user$project$State$get,
									_user$project$State$put(
										_elm_lang$core$Native_Utils.update(
											s,
											{position: _p8._0._0, code: _p8._0._1})));
							} else {
								return _user$project$State$fail(_p8._0);
							}
						}
					},
					A2(
						_user$project$State$andThen,
						function (s) {
							return _elm_lang$core$Native_Utils.eq(s.code, 45) ? A2(
								_user$project$State$followedBy,
								_user$project$State$get,
								A2(
									_elm_lang$core$Maybe$withDefault,
									_user$project$State$fail('Out of range'),
									A2(
										_elm_lang$core$Maybe$map,
										function (c) {
											return _user$project$State$put(
												_elm_lang$core$Native_Utils.update(
													s,
													{code: c, position: s.position + 1}));
										},
										A2(_Skinney$elm_array_exploration$Array_Hamt$get, s.position + 1, codes)))) : _user$project$State$get;
						},
						_user$project$State$get))));
		return A2(
			_elm_lang$core$Result$map,
			function (_p9) {
				var _p10 = _p9;
				return A6(
					_user$project$GraphQL_Lexer$token,
					_user$project$GraphQL_AST_Token$FloatLiteral('1.2'),
					0,
					0,
					0,
					0,
					prev);
			},
			result);
	});
var _user$project$GraphQL_Lexer$readToken = F2(
	function (lexerA, prev) {
		var characters = _user$project$GraphQL_Source$characters(lexerA.source);
		var body = _user$project$GraphQL_Source$body(lexerA.source);
		var bodyLength = _elm_lang$core$String$length(body);
		var prevRec = _user$project$GraphQL_AST_Token$untoken(prev);
		var _p11 = A2(_user$project$GraphQL_Lexer$positionAfterWhitespace, prevRec.end, lexerA);
		var position = _p11._0;
		var lexerB = _p11._1;
		var line = lexerB.line;
		var col = (1 + position) - lexerB.lineStart;
		var maybeCode = A2(_Skinney$elm_array_exploration$Array_Hamt$get, position, characters);
		var result = function () {
			var _p12 = maybeCode;
			if (_p12.ctor === 'Nothing') {
				return (_elm_lang$core$Native_Utils.cmp(position, bodyLength) > -1) ? _elm_lang$core$Result$Ok(
					A6(_user$project$GraphQL_Lexer$token, _user$project$GraphQL_AST_Token$EndOfFile, bodyLength, bodyLength, line, col, prev)) : _elm_lang$core$Result$Err('position is negative somehow');
			} else {
				var _p15 = _p12._0;
				var _p13 = _p15;
				switch (_p13) {
					case 33:
						return _elm_lang$core$Result$Ok(
							A6(_user$project$GraphQL_Lexer$token, _user$project$GraphQL_AST_Token$ExclamationPoint, position, position + 1, line, col, prev));
					case 35:
						return _elm_lang$core$Result$Ok(
							A5(_user$project$GraphQL_Lexer$readComment, characters, position, line, col, prev));
					case 36:
						return _elm_lang$core$Result$Ok(
							A6(_user$project$GraphQL_Lexer$token, _user$project$GraphQL_AST_Token$DollarSign, position, position + 1, line, col, prev));
					case 40:
						return _elm_lang$core$Result$Ok(
							A6(_user$project$GraphQL_Lexer$token, _user$project$GraphQL_AST_Token$LeftParens, position, position + 1, line, col, prev));
					case 41:
						return _elm_lang$core$Result$Ok(
							A6(_user$project$GraphQL_Lexer$token, _user$project$GraphQL_AST_Token$RightParens, position, position + 1, line, col, prev));
					case 46:
						var _p14 = {
							ctor: '_Tuple2',
							_0: A2(_Skinney$elm_array_exploration$Array_Hamt$get, position + 1, characters),
							_1: A2(_Skinney$elm_array_exploration$Array_Hamt$get, position + 2, characters)
						};
						if (((((_p14.ctor === '_Tuple2') && (_p14._0.ctor === 'Just')) && (_p14._0._0 === 46)) && (_p14._1.ctor === 'Just')) && (_p14._1._0 === 46)) {
							return _elm_lang$core$Result$Ok(
								A6(_user$project$GraphQL_Lexer$token, _user$project$GraphQL_AST_Token$Spread, position, position + 3, line, col, prev));
						} else {
							return _elm_lang$core$Result$Err('Syntax problem bad spread');
						}
					case 58:
						return _elm_lang$core$Result$Ok(
							A6(_user$project$GraphQL_Lexer$token, _user$project$GraphQL_AST_Token$Colon, position, position + 1, line, col, prev));
					case 61:
						return _elm_lang$core$Result$Ok(
							A6(_user$project$GraphQL_Lexer$token, _user$project$GraphQL_AST_Token$Equals, position, position + 1, line, col, prev));
					case 64:
						return _elm_lang$core$Result$Ok(
							A6(_user$project$GraphQL_Lexer$token, _user$project$GraphQL_AST_Token$At, position, position + 1, line, col, prev));
					case 91:
						return _elm_lang$core$Result$Ok(
							A6(_user$project$GraphQL_Lexer$token, _user$project$GraphQL_AST_Token$LeftSquareBrace, position, position + 1, line, col, prev));
					case 93:
						return _elm_lang$core$Result$Ok(
							A6(_user$project$GraphQL_Lexer$token, _user$project$GraphQL_AST_Token$RightSquareBrace, position, position + 1, line, col, prev));
					case 123:
						return _elm_lang$core$Result$Ok(
							A6(_user$project$GraphQL_Lexer$token, _user$project$GraphQL_AST_Token$LeftCurlyBrace, position, position + 1, line, col, prev));
					case 124:
						return _elm_lang$core$Result$Ok(
							A6(_user$project$GraphQL_Lexer$token, _user$project$GraphQL_AST_Token$Pipe, position, position + 1, line, col, prev));
					case 125:
						return _elm_lang$core$Result$Ok(
							A6(_user$project$GraphQL_Lexer$token, _user$project$GraphQL_AST_Token$RightCurlyBrace, position, position + 1, line, col, prev));
					case 34:
						return A5(_user$project$GraphQL_Lexer$readString, characters, position, line, col, prev);
					default:
						return ((_elm_lang$core$Native_Utils.cmp(_p15, 32) < 0) && ((!_elm_lang$core$Native_Utils.eq(_p15, 9)) && ((!_elm_lang$core$Native_Utils.eq(_p15, 10)) && (!_elm_lang$core$Native_Utils.eq(_p15, 13))))) ? _elm_lang$core$Result$Err(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Cannot contain the invalid character ',
								_elm_lang$core$Basics$toString(
									_elm_lang$core$Char$fromCode(_p15)))) : ((((_elm_lang$core$Native_Utils.cmp(_p15, 65) > -1) && (_elm_lang$core$Native_Utils.cmp(_p15, 90) < 1)) || (_elm_lang$core$Native_Utils.eq(_p15, 95) || ((_elm_lang$core$Native_Utils.cmp(_p15, 97) > -1) && (_elm_lang$core$Native_Utils.cmp(_p15, 122) < 1)))) ? _elm_lang$core$Result$Ok(
							A5(_user$project$GraphQL_Lexer$readName, characters, position, line, col, prev)) : ((_elm_lang$core$Native_Utils.eq(_p15, 45) || ((_elm_lang$core$Native_Utils.cmp(col, 48) > -1) && (_elm_lang$core$Native_Utils.cmp(col, 57) < 1))) ? A6(_user$project$GraphQL_Lexer$readNumber, characters, position, _p15, line, col, prev) : _elm_lang$core$Result$Err('Syntax error at the end')));
				}
			}
		}();
		return {ctor: '_Tuple2', _0: lexerB, _1: result};
	});
var _user$project$GraphQL_Lexer$Lexer = F6(
	function (a, b, c, d, e, f) {
		return {source: a, options: b, lastToken: c, token: d, line: e, lineStart: f};
	});
