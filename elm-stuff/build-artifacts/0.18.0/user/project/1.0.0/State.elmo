var _user$project$State$execState = F2(
	function (state, _p0) {
		var _p1 = _p0;
		return A2(
			_elm_lang$core$Result$map,
			_elm_lang$core$Tuple$first,
			_p1._0(state));
	});
var _user$project$State$evalState = F2(
	function (state, _p2) {
		var _p3 = _p2;
		return A2(
			_elm_lang$core$Result$map,
			_elm_lang$core$Tuple$second,
			_p3._0(state));
	});
var _user$project$State$unstate = function (_p4) {
	var _p5 = _p4;
	return _p5._0;
};
var _user$project$State$State = function (a) {
	return {ctor: 'State', _0: a};
};
var _user$project$State$map = F2(
	function (f, _p6) {
		var _p7 = _p6;
		return _user$project$State$State(
			function (state) {
				return A2(
					_elm_lang$core$Result$map,
					function (_p8) {
						var _p9 = _p8;
						return {
							ctor: '_Tuple2',
							_0: _p9._0,
							_1: f(_p9._1)
						};
					},
					_p7._0(state));
			});
	});
var _user$project$State$andThen = F2(
	function (f, _p10) {
		var _p11 = _p10;
		return _user$project$State$State(
			function (state) {
				return A2(
					_elm_lang$core$Result$andThen,
					function (_p12) {
						var _p13 = _p12;
						return A2(
							_user$project$State$unstate,
							f(_p13._1),
							_p13._0);
					},
					_p11._0(state));
			});
	});
var _user$project$State$followedBy = F2(
	function (newState, oldState) {
		return A2(
			_user$project$State$andThen,
			function (_p14) {
				return newState;
			},
			oldState);
	});
var _user$project$State$succeed = function (a) {
	return _user$project$State$State(
		function (s) {
			return _elm_lang$core$Result$Ok(
				{ctor: '_Tuple2', _0: s, _1: a});
		});
};
var _user$project$State$fail = function (x) {
	return _user$project$State$State(
		function (s) {
			return _elm_lang$core$Result$Err(x);
		});
};
var _user$project$State$get = _user$project$State$State(
	function (s) {
		return _elm_lang$core$Result$Ok(
			{ctor: '_Tuple2', _0: s, _1: s});
	});
var _user$project$State$gets = function (f) {
	return A2(_user$project$State$map, f, _user$project$State$get);
};
var _user$project$State$put = function (s) {
	return _user$project$State$State(
		function (_p15) {
			return _elm_lang$core$Result$Ok(
				{
					ctor: '_Tuple2',
					_0: s,
					_1: {ctor: '_Tuple0'}
				});
		});
};
var _user$project$State$modify = function (f) {
	return A2(
		_user$project$State$andThen,
		function (_p16) {
			return _user$project$State$put(
				f(_p16));
		},
		_user$project$State$get);
};
